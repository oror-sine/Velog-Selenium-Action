from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.common.keys import Keys
from selenium.webdriver.remote.webelement import WebElement
from selenium.webdriver.support.wait import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from functools import partial
from typing import Callable
import clipboard

# TODO: Read post information from JSON and validate its structure and data types
# TODO: Refactor the module as a class
# TODO: Implement file upload
# - js in selenium 활용해서 drag & drop 구현
# - pyvirtualdisplay, pyautogui 활용 gui 조작


def wait_find_element(driver, by, value, timeout=10):
     return WebDriverWait(driver, timeout=timeout).until(
        # EC.presence_of_element_located((by, value))
        EC.element_to_be_clickable((by, value))   
    )


def clear_in_element(driver:webdriver.Chrome, by, value):
    wait_find_element(driver, by, value).click()
    webdriver.ActionChains(driver=driver).key_down(Keys.CONTROL).send_keys('A', Keys.BACKSPACE).perform()


def copy_paste_in_element(driver:webdriver.Chrome, by, value, content):
    wait_find_element(driver, by, value).click()
    clipboard.copy(content)
    webdriver.ActionChains(driver=driver).key_down(Keys.CONTROL).send_keys('v').perform()


def login_by_github(
        driver:webdriver.Chrome, 
        username:str, 
        password:str
    ):
    XPATH:Callable[[str],WebElement] = partial(wait_find_element, driver, By.XPATH)
    
    login_page = 'https://github.com/login?client_id=7c3902d881910d52ae3e&return_to=%2Flogin%2Foauth%2Fauthorize%3Fclient_id%3D7c3902d881910d52ae3e%26integrateState%3D%26isIntegrate%3D0%26redirect_uri%3Dhttps%253A%252F%252Fv2.velog.io%252Fapi%252Fv2%252Fauth%252Fsocial%252Fcallback%252Fgithub%253Fnext%253D%26scope%3Duser%253Aemail'

    login_field = '//*[@id="login_field"]'
    password_field = '//*[@id="password"]'
    submit_button = '//*[@id="login"]/div[3]/form/div/input[13]'

    driver.get(login_page)

    XPATH(login_field).send_keys(username)
    XPATH(password_field).send_keys(password)
    XPATH(submit_button).click()



    # Reauthorization required 처리 
    if (driver.current_url != 'https://velog.io/'):
        try:
            authorize_button = '/html/body/div[1]/div[6]/main/div/div[2]/div[1]/div[2]/div[1]/form/div/button[2]'
            XPATH(authorize_button).click()    
        except Exception as e:
            raise Exception(e)


def write_post(
        driver:webdriver.Chrome, 
        title, 
        content, 
        tags=[], 
        description=None, 
        private=True, 
        url_slug=None, 
        series=None, 
        thumbnail=None
    ):
    XPATH:Callable[[str],WebElement] = partial(wait_find_element, driver, By.XPATH)
    copy_paste:Callable[[str, str]] = partial(copy_paste_in_element, driver, By.XPATH)
    clear:Callable[[str]] = partial(clear_in_element, driver, By.XPATH)

    title_field = '//*[@id="root"]/div[2]/div/div[1]/div/div[1]/div[1]/div/textarea'
    tag_field = '//*[@id="root"]/div[2]/div/div[1]/div/div[1]/div[1]/div/div[2]/div/input'
    content_field = '//*[@id="root"]/div[2]/div/div[1]/div/div[1]/div[3]/div/div[6]/div[1]/div/div'
    save_button = '//*[@id="root"]/div[2]/div/div[1]/div/div[2]/div/div/button[1]'
    publish_button = '//*[@id="root"]/div[2]/div/div[1]/div/div[2]/div/div/button[2]'
    public_button = '//*[@id="root"]/div[2]/div/div[1]/div/div[2]/div/div/button[1]'
    private_button = '//*[@id="root"]/div[2]/div[2]/div/div[3]/div[1]/section[1]/div/button[2]'
    url_slug_field = '//*[@id="root"]/div[2]/div[2]/div/div[3]/div[1]/section[2]/div/div/input'
    add_to_series_button = '//*[@id="root"]/div[2]/div[2]/div/div[3]/div[1]/section[3]/div/button'
    new_series_button = '//*[@id="root"]/div[2]/div[2]/div/div[3]/section/div/div[1]/div/form/div/div[2]/button[2]'
    series_ul = '//*[@id="root"]/div[2]/div[2]/div/div[3]/section/div/div[1]/ul'
    series_field = '//*[@id="root"]/div[2]/div[2]/div/div[3]/section/div/div[1]/div/form/input'
    select_series_button = '//*[@id="root"]/div[2]/div[2]/div/div[3]/section/div/div[2]/button[2]'
    submit_button = '//*[@id="root"]/div[2]/div[2]/div/div[3]/div[2]/button[2]'
    description_field = '//*[@id="root"]/div[2]/div[2]/div/div[1]/section/div/div[2]/textarea'

    driver.get('https://velog.io/write')
    
    copy_paste(title_field, title)
    
    for tag in tags:
        copy_paste(tag_field, tag)
        XPATH(tag_field).send_keys(Keys.RETURN)

    content += '\n\n#### Auto-generated by [Velog-Selenium-Action](https://github.com/oror-sine/Velog-Selenium-Action)'
    clipboard.copy(content)
    copy_paste(content_field, content)

    XPATH(publish_button).click()

    if description is not None:
        copy_paste(description_field, description)
    
    if private:
        XPATH(private_button).click()
    else:
        XPATH(public_button).click()

    if url_slug is not None:
        clear(url_slug_field)
        copy_paste(url_slug_field, url_slug)

    if series is not None:
        XPATH(add_to_series_button).click()
        XPATH(series_field).click()
        copy_paste(series_field, series)
        XPATH(new_series_button).click()
        for series_li in XPATH(series_ul).find_elements(By.TAG_NAME, 'li'):
            if series_li.text == series:
                series_li.click()
                break
        XPATH(select_series_button).click()
    
    if thumbnail is not None:
        raise NotImplementedError()
    
    current_url = driver.current_url
    XPATH(submit_button).click()
    WebDriverWait(driver, 10).until(EC.url_changes(current_url))
    
    print('Successfully Generated:',driver.current_url)


def delete_post(
        driver:webdriver.Chrome,
        post_url:str|None = None,
        user_name:str|None = None,
        url_slug:str|None = None
    ):
    XPATH:Callable[[str],WebElement] = partial(wait_find_element, driver, By.XPATH)

    if post_url is None:
        post_url = f'https://velog.io/@{user_name}/{url_slug}'
    
    delete_button = '//*[@id="root"]/div[2]/div[3]/div/div[1]/button[3]'
    submit_button = '//*[@id="root"]/div[2]/div[3]/div[3]/div/div/div[2]/button[2]'

    driver.get(post_url)

    try:
        XPATH(delete_button).click()
        XPATH(submit_button).click()
    except Exception as e:
        raise Exception(e)

    print('Successfully Deleted:',driver.current_url)
    
    
def edit_post():
    NotImplementedError()


if __name__ == '__main__':
    from datetime import datetime
    from get_driver import get_driver
    import sys
    
    _, username, password = (None, )*3
    
    if len(sys.argv) == 1:
        from dotenv import dotenv_values
        username, password = dotenv_values('.env').values()
        
    elif len(sys.argv) == 3:
        _, username, password = sys.argv

    if username is None or password is None:
        raise Exception('missing login info')

    driver = None
    try:
        driver = get_driver(options=[])
    except Exception:
        print(f'driver with display is not available: {Exception}')
        driver = get_driver()
    

    login_by_github(driver, username, password)


    timestamp = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
    str_date, str_time = timestamp.split()
    post = {
        'title': f'[TEST] {timestamp}', 
        'content':'This post is created for testing Velog-Selenium-Action', 
        'tags':['Auto-generated by Velog-Selenium-Action', str_date, str_time], 
        'description':None, 
        'private':True, 
        'url_slug':'test', 
        'series': 'Testing Velog-Selenium-Action', 
        'thumbnail':None
    }

    write_post(driver, **post)

    delete_post(driver, post_url=driver.current_url)
